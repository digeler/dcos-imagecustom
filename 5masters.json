{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "agentCount": {
      "defaultValue": 2,
      "allowedValues": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        99,
        100
      ],
      "type": "Int",

      "metadata": {
        "description": "The number of Mesos agents for the cluster.  This value can be from 1 to 100"
      }
    },
    "agentEndpointDNSNamePrefix": {
      "type": "String",
      "defaultValue": "mmutofkd",
      "metadata": {
        "description": "Sets the Domain name label for the agent pool IP Address.  The concatenation of the domain name label and the regional DNS zone make up the fully qualified domain name associated with the public IP address."
      }
    },
    "agentVMSize": {
      "defaultValue": "Standard_D2",
      "allowedValues": [
        "Standard_A0",
        "Standard_A1",
        "Standard_A1_v2",
        "Standard_A10",
        "Standard_A11",
        "Standard_A2",
        "Standard_A2_v2",
        "Standard_A2m_v2",
        "Standard_A3",
        "Standard_A4",
        "Standard_A4_v2",
        "Standard_A4m_v2",
        "Standard_A5",
        "Standard_A6",
        "Standard_A7",
        "Standard_A8",
        "Standard_A8_v2",
        "Standard_A8m_v2",
        "Standard_A9",
        "Standard_D1",
        "Standard_D1_v2",
        "Standard_D11",
        "Standard_D11_v2",
        "Standard_D11_v2_Promo",
        "Standard_D12",
        "Standard_D12_v2",
        "Standard_D12_v2_Promo",
        "Standard_D13",
        "Standard_D13_v2",
        "Standard_D13_v2_Promo",
        "Standard_D14",
        "Standard_D14_v2",
        "Standard_D14_v2_Promo",
        "Standard_D15_v2",
        "Standard_D2",
        "Standard_D2_v2",
        "Standard_D2_v2_Promo",
        "Standard_D3",
        "Standard_D3_v2",
        "Standard_D3_v2_Promo",
        "Standard_D4",
        "Standard_D4_v2",
        "Standard_D4_v2_Promo",
        "Standard_D5_v2",
        "Standard_D5_v2_Promo",
        "Standard_DS1",
        "Standard_DS1_v2",
        "Standard_DS11",
        "Standard_DS11_v2",
        "Standard_DS11_v2_Promo",
        "Standard_DS12",
        "Standard_DS12_v2",
        "Standard_DS12_v2_Promo",
        "Standard_DS13",
        "Standard_DS13_v2",
        "Standard_DS13_v2_Promo",
        "Standard_DS14",
        "Standard_DS14_v2",
        "Standard_DS14_v2_Promo",
        "Standard_DS15_v2",
        "Standard_DS2",
        "Standard_DS2_v2",
        "Standard_DS2_v2_Promo",
        "Standard_DS3",
        "Standard_DS3_v2",
        "Standard_DS3_v2_Promo",
        "Standard_DS4",
        "Standard_DS4_v2",
        "Standard_DS4_v2_Promo",
        "Standard_DS5_v2",
        "Standard_DS5_v2_Promo",
        "Standard_F1",
        "Standard_F16",
        "Standard_F16s",
        "Standard_F1s",
        "Standard_F2",
        "Standard_F2s",
        "Standard_F4",
        "Standard_F4s",
        "Standard_F8",
        "Standard_F8s",
        "Standard_G1",
        "Standard_G2",
        "Standard_G3",
        "Standard_G4",
        "Standard_G5",
        "Standard_GS1",
        "Standard_GS2",
        "Standard_GS3",
        "Standard_GS4",
        "Standard_GS5",
        "Standard_H16",
        "Standard_H16m",
        "Standard_H16mr",
        "Standard_H16r",
        "Standard_H8",
        "Standard_H8m",
        "Standard_L16s",
        "Standard_L32s",
        "Standard_L4s",
        "Standard_L8s",
        "Standard_NC12",
        "Standard_NC24",
        "Standard_NC24r",
        "Standard_NC6",
        "Standard_NV12",
        "Standard_NV24",
        "Standard_NV6"
      ],
      "type": "String",
      "metadata": {
        "description": "The size of the Agent VMSS Virtual Machine."
      }
    },
    "masterVMSize": {
      "defaultValue": "Standard_D2",
      "allowedValues": [
        "Standard_D2",
        "Standard_D2_v2"
      ],
      "type": "String",
      "metadata": {
        "description": "The size of the Master Virtual Machines."
      }
    },
    "disablePasswordAuthentication": {
      "defaultValue": true,
      "type": "Bool",
      "metadata": {
        "description": "This setting controls whether password auth is disabled for Linux VMs provisioned by this template. Default is true which disables password and makes SSH key required."
      }
    },
    
    "isValidation": {
      "defaultValue": 0,
      "allowedValues": [
        0,
        1
      ],
      "type": "Int",
      "metadata": {
        "description": "This is testing in the validation region"
      }
    },
    "jumpboxEndpointDNSNamePrefix": {
      "defaultValue": "",
      "type": "String",
      "metadata": {
        "description": "Sets the Domain name label for the jumpbox.  The concatenation of the domain name label and the regionalized DNS zone make up the fully qualified domain name associated with the public IP address."
      }
    },
    "linuxAdminPassword": {
      "defaultValue": "",
      "type": "SecureString",
      "metadata": {
        "description": "Password for the Linux Virtual Machine.  Not Required.  If not set, you must provide a SSH key."
      }
    },
    "linuxAdminUsername": {
      "defaultValue": "dinor",
      "type": "String",
      "metadata": {
        "description": "User name for the Linux Virtual Machines (SSH or Password)."
      }
    },
    "sourceImageVhdUri": {
      "defaultValue": "https://007pqzkn75ztrjmagntpri0.blob.core.windows.net/system/Microsoft.Compute/Images/basedcos/dcos-osDisk.6ff742c1-c5e2-423d-a90a-1d1e6665d8af.vhd",
      "type": "String",
      "metadata": {
        "description": "This is the linux version used by the linux cluster"
      }
    },
    "masterEndpointDNSNamePrefix": {
      "type": "String",
      "defaultValue": "masste",
      "metadata": {
        "description": "Sets the Domain name label for the master IP Address.  The concatenation of the domain name label and the regional DNS zone make up the fully qualified domain name associated with the public IP address."
      }
    },
    "nameSuffix": {
      "defaultValue": "01234567",
      "type": "String",
      "metadata": {
        "description": "A string to include in the names of resources created.  Defaults to 0.  Can not be blank."
      }
    },
    "oauthEnabled": {
      "defaultValue": "false",
      "allowedValues": [
        "true",
        "false"
      ],
      "type": "String",
      "metadata": {
        "description": "Enable OAuth authentication"
      }
    },
    "postInstallScriptURI": {
      "defaultValue": "disabled",
      "type": "String",
      "metadata": {
        "description": "After installation, this specifies a script to download and install.  To disabled, set value to 'disabled'."
      }
    },
    "setLinuxConfigurationForVMCreate": {
      "defaultValue": 1,
      "allowedValues": [
        0,
        1
      ],
      "type": "Int",
      "metadata": {
        "description": "This setting controls whether Linux configuration with SSH Key is passed in VM PUT Payload.  Defaults to 1.  If SSH Key is blank, this must be set to 0."
      }
    },
    "sshRSAPublicKey": {
      "defaultValue": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCz7gkqOUUUlCObjgevthzsfFEUGPxm/8+tQYqDXQ/Z0aCOB25cvSHepTWPb0fFJ8fCqp/+9mxJg8tR6XY7nliZ8ioH3j3yBphgzPAkPmoX1fEe05TPm3RQQiQiljZPiKhnxnDI9kCyPI/Fp7cmhklEDFN9aMy/0/3Jx87pIktS0KPC9U/WMrtmNr/0LeKva/0+NgvJkm3mcqAFBH3pBVsnVQrGObp7cHXVXZAas6mjhqsTLjs52T1OQkRtilZsjV9kjvD5qU9tfKRVFBLZGIsVZsCGN4+i3R0UfrCRG6EYqezLZMMf5B5jCugD68kEVPSbsccMVijPDbLWmqIlLX45",
      "type": "String",
      "metadata": {
        "description": "SSH public key used for auth to all Linux machines.  Not Required.  If not set, you must provide a password key."
      }
    },

    "windowsAdminPassword": {
      "defaultValue": "",
      "type": "SecureString",
      "metadata": {
        "description": "Password for the Windows Virtual Machine."
      }
    },
    "windowsAdminUsername": {
      "defaultValue": "azureuser",
      "type": "String",
      "metadata": {
        "description": "User name for the Windows Virtual Machine (Password Only Supported)."
      }
    },
    "windowsJumpboxOffer": {
      "defaultValue": "VisualStudio",
      "type": "String",
      "metadata": {
        "description": "This is the windows offer used by the windows"
      }
    },
    "windowsJumpboxPublisher": {
      "defaultValue": "MicrosoftVisualStudio",
      "type": "String",
      "metadata": {
        "description": "This is the windows publisher used by the windows"
      }
    },
    "windowsJumpboxSku": {
      "defaultValue": "VS-2015-Enterprise-AzureSDK-2.7-WS2012R2",
      "type": "String",
      "metadata": {
        "description": "This is the windows sku used by the windows"
      }
    }
  },
  "variables": {
    "DcosImageCommit": "0ce03387884523f02624d3fb56c7fbe2e06e181b",
    "TemplateGenerationDate": "2017-03-29 00:37:34.244042",
    "adminPassword": "[parameters('linuxAdminPassword')]",
    "adminUsername": "[parameters('linuxAdminUsername')]",
    "agentAddressPrefix": "10.0.0.0/8",
    "agentAvailabilitySet": "[concat(variables('orchestratorName'), '-agent-availabilitySet-', variables('nameSuffix'))]",
    "agentCustomScript": "[concat('/usr/bin/nohup /bin/bash -c \"/bin/bash /opt/azure/containers/configure-mesos-cluster.sh ',variables('clusterInstallParameters'),' >> /var/log/azure/cluster-bootstrap.log 2>&1 &\" &')]",
    "agentEndpointDNSNamePrefix": "[tolower(parameters('agentEndpointDNSNamePrefix'))]",
    "agentFirstAddr": 20,
    "agentPrivateAddressPrefix": "10.32.0.0/11",
    "agentPrivateCount": "[parameters('agentCount')]",
    "agentPrivateNSGID": "[resourceId('Microsoft.Network/networkSecurityGroups',variables('agentPrivateNSGName'))]",
    "agentPrivateNSGName": "[concat(variables('orchestratorName'), '-agent-private-nsg-', variables('nameSuffix'))]",
    "agentPrivateSubnetName": "[concat(variables('orchestratorName'), '-agentPrivateSubnet')]",
    "agentPrivateVMNamePrefix": "[concat(variables('orchestratorName'), '-agent-private-', variables('nameSuffix'))]",
    "agentPrivateVMSSCount": 1,
    "agentPublicAddressPrefix": "10.0.0.0/11",
    "agentPublicCount": "[variables('agentPublicCountPerMasterCount')[string(variables('masterCount'))]]",
    "agentPublicCountPerMasterCount": {
      "1": 1,
      "3": 3,
      "5": 3
    },
    "agentPublicIPAddressName": "[concat(variables('orchestratorName'), '-agent-ip-', variables('agentEndpointDNSNamePrefix'), '-', variables('nameSuffix'))]",
    "agentPublicNSGID": "[resourceId('Microsoft.Network/networkSecurityGroups',variables('agentPublicNSGName'))]",
    "agentPublicNSGName": "[concat(variables('orchestratorName'), '-agent-public-nsg-', variables('nameSuffix'))]",
    "agentPublicSubnetName": "[concat(variables('orchestratorName'), '-agentPublicSubnet')]",
    "agentPublicVMNamePrefix": "[concat(variables('orchestratorName'), '-agent-public-', variables('nameSuffix'))]",
    "agentPublicVMSSCount": 1,
    "agentStorageAccountsCount": 5,

    "agentVMSize": "[parameters('agentVMSize')]",
    "agentsPerIPv4Octet": 200,
    "agentsPublicLbBackendPoolName": "[concat(variables('orchestratorName'), '-agent-pool-', variables('nameSuffix'))]",
    "agentsPublicLbID": "[resourceId('Microsoft.Network/loadBalancers',variables('agentsPublicLbName'))]",
    "agentsPublicLbIPConfigID": "[concat(variables('agentsPublicLbID'),'/frontendIPConfigurations/', variables('agentsPublicLbIPConfigName'))]",
    "agentsPublicLbIPConfigName": "[concat(variables('orchestratorName'), '-agent-lbFrontEnd-', variables('nameSuffix'))]",
    "agentsPublicLbName": "[concat(variables('orchestratorName'), '-agent-lb-', variables('nameSuffix'))]",
    "apiVersionDefault": "2016-03-30",
    "apiVersionStorage": "2015-06-15",
    "chronosEnabled": true,
    "clusterInstallParameters": "[concat(variables('masterCount'), ' ',variables('masterVMNamePrefix'), ' ',variables('masterFirstAddr'), ' ',variables('swarmEnabled'),' ',variables('marathonEnabled'),' ',variables('chronosEnabled'),' ',variables('omsStorageAccount'),' ',variables('omsStorageAccountKey'),' ', variables('adminUsername'),' ',variables('postInstallScriptURI'))]",

    "diagnosticsStorageAccountName-false": "",

    "diagnosticsStorageAccountResourceGroup": "[resourceGroup().name]",
    "disablePasswordAuthentication": "[parameters('disablePasswordAuthentication')]",


    "isValidation": "[parameters('isValidation')]",
    "linuxConfiguration": "[variables('linuxConfigurations')[variables('setLinuxConfigurationForVMCreate')]]",
    "linuxConfigurations": [
      { },
      {
        "disablePasswordAuthentication": "[variables('disablePasswordAuthentication')]",
        "ssh": {
          "publicKeys": [
            {
              "keyData": "[variables('sshRSAPublicKey')]",
              "path": "[variables('sshKeyPath')]"
            }
          ]
        }
      }
    ],

    "marathonEnabled": true,
    "masterAddressPrefix": "172.16.0.0/24",
    "masterAvailabilitySet": "[concat(variables('orchestratorName'), '-master-availabilitySet-', variables('nameSuffix'))]",
    "masterCount":5,
    "masterCustomScript": "[concat('/bin/bash -c \"/bin/bash /opt/azure/containers/configure-mesos-cluster.sh ',variables('clusterInstallParameters'),' >> /var/log/azure/cluster-bootstrap.log 2>&1\"')]",
    "masterEndpointDNSNamePrefix": "[tolower(parameters('masterEndpointDNSNamePrefix'))]",
    "masterFirstAddr": 5,
    "masterLbBackendPoolName": "[concat(variables('orchestratorName'), '-master-pool-', variables('nameSuffix'))]",
    "masterLbID": "[resourceId('Microsoft.Network/loadBalancers',variables('masterLbName'))]",
    "masterLbIPConfigID": "[concat(variables('masterLbID'),'/frontendIPConfigurations/', variables('masterLbIPConfigName'))]",
    "masterLbIPConfigName": "[concat(variables('orchestratorName'), '-master-lbFrontEnd-', variables('nameSuffix'))]",
    "masterLbInboundNatRules": [
      [
        {
          "id": "[concat(variables('masterSshInboundNatRuleIdPrefix'),'0')]"
        },
        {
          "id": "[concat(variables('masterSshPort22InboundNatRuleIdPrefix'),'0')]"
        }
      ],
      [
        {
          "id": "[concat(variables('masterSshInboundNatRuleIdPrefix'),'1')]"
        }
      ],
      [
        {
          "id": "[concat(variables('masterSshInboundNatRuleIdPrefix'),'2')]"
        }
      ],
      [
        {
          "id": "[concat(variables('masterSshInboundNatRuleIdPrefix'),'3')]"
        }
      ],
      [
        {
          "id": "[concat(variables('masterSshInboundNatRuleIdPrefix'),'4')]"
        }
      ]
    ],
    "masterLbName": "[concat(variables('orchestratorName'), '-master-lb-', variables('nameSuffix'))]",
    "masterNSGID": "[resourceId('Microsoft.Network/networkSecurityGroups',variables('masterNSGName'))]",
    "masterNSGName": "[concat(variables('orchestratorName'), '-master-nsg-', variables('nameSuffix'))]",
    "masterPublicIPAddressName": "[concat(variables('orchestratorName'), '-master-ip-', variables('masterEndpointDNSNamePrefix'), '-', variables('nameSuffix'))]",
    "masterSizes": [
      "[parameters('masterVMSize')]",
      "Standard_A1"
    ],
    "masterSshInboundNatRuleIdPrefix": "[concat(variables('masterLbID'),'/inboundNatRules/SSH-',variables('masterVMNamePrefix'))]",
    "masterSshInboundNatRuleNamePrefix": "[concat(variables('masterLbName'),'/SSH-',variables('masterVMNamePrefix'))]",
    "masterSshPort22InboundNatRuleIdPrefix": "[concat(variables('masterLbID'),'/inboundNatRules/SSHPort22-',variables('masterVMNamePrefix'))]",
    "masterSshPort22InboundNatRuleNamePrefix": "[concat(variables('masterLbName'),'/SSHPort22-',variables('masterVMNamePrefix'))]",
    "masterStorageAccountExhibitorName": "exhibtorrr",

    "masterSubnetName": "[concat(variables('orchestratorName'), '-masterSubnet')]",
    "masterSubnetRef": "[concat(variables('vnetID'),'/subnets/',variables('masterSubnetName'))]",
    "masterVMNamePrefix": "[concat(variables('orchestratorName'), '-master-', variables('nameSuffix'), '-')]",
    
    "masterVMNic": [
      "[concat(variables('masterVMNamePrefix'), 'nic-0')]",
      "[concat(variables('masterVMNamePrefix'), 'nic-1')]",
      "[concat(variables('masterVMNamePrefix'), 'nic-2')]",
      "[concat(variables('masterVMNamePrefix'), 'nic-3')]",
      "[concat(variables('masterVMNamePrefix'), 'nic-4')]",
      "[concat(variables('masterVMNamePrefix'), 'nic-5')]",
      "[concat(variables('masterVMNamePrefix'), 'nic-6')]"
    ],
    "masterVMSize": "[variables('masterSizes')[variables('isValidation')]]",
    "nameSuffix": "[parameters('nameSuffix')]",
    "oauthEnabled": "[parameters('oauthEnabled')]",
    "omsStorageAccount": "none",
    "omsStorageAccountKey": "none",
    "orchestratorName": "dcos",
    "postInstallScriptURI": "[parameters('postInstallScriptURI')]",
    "setBrowserFirstTabDefaultPrefix": "powershell.exe -ExecutionPolicy Unrestricted -command \"New-Item -Path HKLM:'\\SOFTWARE\\Policies\\Microsoft\\Internet Explorer' ; New-Item -Path HKLM:'\\SOFTWARE\\Policies\\Microsoft\\Internet Explorer\\BrowserEmulation' ; New-ItemProperty -Path HKLM:'\\SOFTWARE\\Policies\\Microsoft\\Internet Explorer\\BrowserEmulation' -Name IntranetCompatibilityMode -Value 0 -Type DWord; New-Item -Path HKLM:'\\SOFTWARE\\Policies\\Microsoft\\Internet Explorer\\Main' ; New-ItemProperty -Path HKLM:'\\SOFTWARE\\Policies\\Microsoft\\Internet Explorer\\Main' -Name 'Start Page' -Type String -Value http://",
    "setBrowserFirstTabDefaultSuffix": "0:5050",
    "setLinuxConfigurationForVMCreate": "[parameters('setLinuxConfigurationForVMCreate')]",
    "sshKeyPath": "[concat('/home/', variables('adminUsername'), '/.ssh/authorized_keys')]",
    "sshRSAPublicKey": "[parameters('sshRSAPublicKey')]",
    "storageAccountBaseNameNewSuffix-false": "",
    "storageAccountBaseNameNewSuffix-true": "[resourceGroup().location]",
    "storageAccountPrefixes": [
      "0",
      "6",
      "c",
      "i",
      "o",
      "u",
      "1",
      "7",
      "d",
      "j",
      "p",
      "v",
      "2",
      "8",
      "e",
      "k",
      "q",
      "w",
      "3",
      "9",
      "f",
      "l",
      "r",
      "x",
      "4",
      "a",
      "g",
      "m",
      "s",
      "y",
      "5",
      "b",
      "h",
      "n",
      "t",
      "z"
    ],
    "storageAccountPrefixesCount": "[length(variables('storageAccountPrefixes'))]",
    "storageAccountType": "Standard_LRS",
    "storageLocation": "[variables('storageLocations')[variables('isValidation')]]",
    "storageLocations": [
      "[resourceGroup().location]",
      "East US 2 (Stage)"
    ],
    "swarmEnabled": false,
    "virtualNetworkName": "[concat(variables('orchestratorName'), '-vnet-', variables('nameSuffix'))]",
    "vmSizesMap": {
      "Standard_A0": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A1": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A1_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A10": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A11": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A2_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A2m_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A3": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A4": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A4_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A4m_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A5": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A6": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A7": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A8": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A8_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A8m_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A9": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D1": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D1_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D11": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D11_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D11_v2_Promo": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D12": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D12_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D12_v2_Promo": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D13": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D13_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D13_v2_Promo": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D14": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D14_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D14_v2_Promo": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D15_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D2_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D2_v2_Promo": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D3": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D3_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D3_v2_Promo": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D4": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D4_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D4_v2_Promo": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D5_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D5_v2_Promo": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_DS1": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS1_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS11": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS11_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS11_v2_Promo": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS12": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS12_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS12_v2_Promo": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS13": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS13_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS13_v2_Promo": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS14": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS14_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS14_v2_Promo": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS15_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS2_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS2_v2_Promo": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS3": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS3_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS3_v2_Promo": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS4": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS4_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS4_v2_Promo": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS5_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS5_v2_Promo": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_F1": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_F16": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_F16s": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_F1s": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_F2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_F2s": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_F4": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_F4s": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_F8": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_F8s": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_G1": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_G2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_G3": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_G4": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_G5": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_GS1": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_GS2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_GS3": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_GS4": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_GS5": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_H16": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_H16m": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_H16mr": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_H16r": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_H8": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_H8m": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_L16s": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_L32s": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_L4s": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_L8s": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_NC12": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_NC24": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_NC24r": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_NC6": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_NV12": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_NV24": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_NV6": {
        "storageAccountType": "Standard_LRS"
      }
    },

    "vnetID": "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]",
    "wadcfgxend": "[concat('\"><MetricAggregation scheduledTransferPeriod=\"PT1H\"/><MetricAggregation scheduledTransferPeriod=\"PT1M\"/></Metrics></DiagnosticMonitorConfiguration></WadCfg>')]",
    "wadlogs": "<WadCfg><DiagnosticMonitorConfiguration>",
    "wadperfcounters1-false": "",
    "wadperfcounters1-true": "<PerformanceCounters scheduledTransferPeriod=\"PT1M\"><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\AvailableMemory\" sampleRate=\"PT15S\" unit=\"Bytes\"><annotation displayName=\"Memory available\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\PercentAvailableMemory\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Mem. percent available\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\UsedMemory\" sampleRate=\"PT15S\" unit=\"Bytes\"><annotation displayName=\"Memory used\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\PercentUsedMemory\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Memory percentage\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\PercentUsedByCache\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Mem. used by cache\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor\\PercentIdleTime\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU idle time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor\\PercentUserTime\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU user time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor\\PercentProcessorTime\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU percentage guest OS\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor\\PercentIOWaitTime\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU IO wait time\" locale=\"en-us\"/></PerformanceCounterConfiguration>",
    "wadperfcounters2-false": "",
    "wadperfcounters2-true": "<PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\BytesPerSecond\" sampleRate=\"PT15S\" unit=\"BytesPerSecond\"><annotation displayName=\"Disk total bytes\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\ReadBytesPerSecond\" sampleRate=\"PT15S\" unit=\"BytesPerSecond\"><annotation displayName=\"Disk read guest OS\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\WriteBytesPerSecond\" sampleRate=\"PT15S\" unit=\"BytesPerSecond\"><annotation displayName=\"Disk write guest OS\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\TransfersPerSecond\" sampleRate=\"PT15S\" unit=\"CountPerSecond\"><annotation displayName=\"Disk transfers\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\ReadsPerSecond\" sampleRate=\"PT15S\" unit=\"CountPerSecond\"><annotation displayName=\"Disk reads\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\WritesPerSecond\" sampleRate=\"PT15S\" unit=\"CountPerSecond\"><annotation displayName=\"Disk writes\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\AverageReadTime\" sampleRate=\"PT15S\" unit=\"Seconds\"><annotation displayName=\"Disk read time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\AverageWriteTime\" sampleRate=\"PT15S\" unit=\"Seconds\"><annotation displayName=\"Disk write time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\AverageTransferTime\" sampleRate=\"PT15S\" unit=\"Seconds\"><annotation displayName=\"Disk transfer time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\AverageDiskQueueLength\" sampleRate=\"PT15S\" unit=\"Count\"><annotation displayName=\"Disk queue length\" locale=\"en-us\"/></PerformanceCounterConfiguration></PerformanceCounters>",
    "windowsAdminPassword": "[parameters('windowsAdminPassword')]",
    "windowsAdminUsername": "[parameters('windowsAdminUsername')]",
    "math": {
      "modulo0": [ "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1" ],
      "modulo1": [ "1", "2", "3", "0", "1", "2", "3", "1", "2", "0", "1", "2", "0", "1", "2", "0", "1", "2", "0", "1", "2", "0", "1", "2", "0", "1", "2", "0", "1", "2", "0", "1", "2", "0", "1", "2" ]
    },
    "num": "dcos-master-01234567-0"
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('masterStorageAccountExhibitorName')]",
      "apiVersion": "[variables('apiVersionStorage')]",
      "location": "[variables('storageLocation')]",
      "properties": {
        "accountType": "Standard_LRS"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('virtualNetworkName')]",
      "apiVersion": "[variables('apiVersionDefault')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('masterAddressPrefix')]",
            "[variables('agentAddressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('masterSubnetName')]",
            "properties": {
              "addressPrefix": "[variables('masterAddressPrefix')]"
            }
          },
          {
            "name": "[variables('agentPublicSubnetName')]",
            "properties": {
              "addressPrefix": "[variables('agentPublicAddressPrefix')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('agentPublicNSGName'))]"
              }
            }
          },
          {
            "name": "[variables('agentPrivateSubnetName')]",
            "properties": {
              "addressPrefix": "[variables('agentPrivateAddressPrefix')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('agentPrivateNSGName'))]"
              }
            }
          }
        ]
      },
      "dependsOn": [
        "[concat('Microsoft.Network/networkSecurityGroups/', variables('agentPublicNSGName'))]",
        "[concat('Microsoft.Network/networkSecurityGroups/', variables('agentPrivateNSGName'))]"
      ]
    },
    {
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('masterAvailabilitySet')]",
      "apiVersion": "[variables('apiVersionDefault')]",
      "location": "[resourceGroup().location]",
      "properties": { }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('masterPublicIPAddressName')]",
      "apiVersion": "[variables('apiVersionDefault')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "dnsSettings": {
          "domainNameLabel": "[variables('masterEndpointDNSNamePrefix')]"
        },
        "publicIPAllocationMethod": "Dynamic"
      }
    },
    {
      "type": "Microsoft.Network/loadBalancers",
      "name": "[variables('masterLbName')]",
      "apiVersion": "[variables('apiVersionDefault')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "backendAddressPools": [
          {
            "name": "[variables('masterLbBackendPoolName')]"
          }
        ],
        "frontendIPConfigurations": [
          {
            "name": "[variables('masterLbIPConfigName')]",
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('masterPublicIPAddressName'))]"
              }
            }
          }
        ]
      },
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/loadBalancers/inboundNatRules",
      "name": "[concat(variables('masterSshInboundNatRuleNamePrefix'),copyIndex())]",
      "apiVersion": "[variables('apiVersionDefault')]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "masterLbLoopNode",
        "count": "[variables('masterCount')]"
      },
      "properties": {
        "backendPort": 22,
        "enableFloatingIP": false,
        "frontendIPConfiguration": {
          "id": "[variables('masterLbIPConfigID')]"
        },
        "frontendPort": "[copyIndex(2200)]",
        "protocol": "tcp"
      },
      "dependsOn": [
        "[variables('masterLbID')]"
      ]
    },
    {
      "type": "Microsoft.Network/loadBalancers/inboundNatRules",
      "name": "[concat(variables('masterSshPort22InboundNatRuleNamePrefix'), '0')]",
      "apiVersion": "[variables('apiVersionDefault')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "backendPort": 2222,
        "enableFloatingIP": false,
        "frontendIPConfiguration": {
          "id": "[variables('masterLbIPConfigID')]"
        },
        "frontendPort": "22",
        "protocol": "tcp"
      },
      "dependsOn": [
        "[variables('masterLbID')]"
      ]
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[variables('masterNSGName')]",
      "apiVersion": "[variables('apiVersionDefault')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "securityRules": [
          {
            "name": "ssh",
            "properties": {
              "access": "Allow",
              "description": "Allow SSH",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "22",
              "direction": "Inbound",
              "priority": 200,
              "protocol": "Tcp",
              "sourceAddressPrefix": "*",
              "sourcePortRange": "*"
            }
          },
          {
            "name": "ssh2",
            "properties": {
              "access": "Allow",
              "description": "Allow SSH",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "2222",
              "direction": "Inbound",
              "priority": 201,
              "protocol": "Tcp",
              "sourceAddressPrefix": "*",
              "sourcePortRange": "*"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[variables('agentPrivateNSGName')]",
      "apiVersion": "[variables('apiVersionDefault')]",
      "location": "[resourceGroup().location]"
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[variables('agentPublicNSGName')]",
      "apiVersion": "[variables('apiVersionDefault')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "securityRules": [
          {
            "name": "Allow_HTTP",
            "properties": {
              "access": "Allow",
              "description": "Allow HTTP traffic from the Internet to Public Agents",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "80",
              "direction": "Inbound",
              "priority": 200,
              "protocol": "*",
              "sourceAddressPrefix": "Internet",
              "sourcePortRange": "*"
            }
          },
          {
            "name": "Allow_HTTPS",
            "properties": {
              "access": "Allow",
              "description": "Allow HTTPS traffic from the Internet to Public Agents",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "443",
              "direction": "Inbound",
              "priority": 300,
              "protocol": "*",
              "sourceAddressPrefix": "Internet",
              "sourcePortRange": "*"
            }
          },
          {
            "name": "Allow_8080",
            "properties": {
              "access": "Allow",
              "description": "Allow 8080 traffic from the Internet to Public Agents",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "8080",
              "direction": "Inbound",
              "priority": 400,
              "protocol": "*",
              "sourceAddressPrefix": "Internet",
              "sourcePortRange": "*"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('masterVMNamePrefix'), 'nic-', copyIndex())]",
      "apiVersion": "[variables('apiVersionDefault')]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "nicLoopNode",
        "count": "[variables('masterCount')]"
      },
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipConfigNode",
            "properties": {
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[concat(variables('masterLbID'), '/backendAddressPools/', variables('masterLbBackendPoolName'))]"
                }
              ],
              "loadBalancerInboundNatRules": "[variables('masterLbInboundNatRules')[copyIndex()]]",
              "privateIPAddress": "[concat(split(variables('masterAddressPrefix'),'0/24')[0], copyIndex(variables('masterFirstAddr')))]",
              "privateIPAllocationMethod": "Static",
              "subnet": {
                "id": "[variables('masterSubnetRef')]"
              }
            }
          }
        ],
        "networkSecurityGroup": {
          "id": "[variables('masterNSGID')]"
        }
      },
      "dependsOn": [
        "[variables('masterLbID')]",
        "[variables('vnetID')]",
        "[concat(variables('masterSshInboundNatRuleIdPrefix'),copyIndex())]",
        "[concat(variables('masterSshPort22InboundNatRuleIdPrefix'),'0')]",
        "[variables('masterNSGID')]"
      ]
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(variables('masterVMNamePrefix'), copyIndex())]",
      "apiVersion": "[variables('apiVersionDefault')]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "vmLoopNode",
        "count": "[variables('masterCount')]"
      },
      "tags": {
        "creationSource": "[concat('acs-', variables('masterVMNamePrefix'), copyIndex())]"
      },
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('masterAvailabilitySet'))]"
        },
       
        "hardwareProfile": {
          "vmSize": "[variables('masterVMSize')]"
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('masterVMNamePrefix'), 'nic-', copyIndex()))]"
            }
          ]
        },
        "osProfile": {
          "adminPassword": "[variables('adminPassword')]",
          "adminUsername": "[variables('adminUsername')]",
          "computername": "[concat(variables('masterVMNamePrefix'), copyIndex())]",
          "customData": "[base64(concat('#cloud-config\n\n', '{\"bootcmd\": [\"bash -c \\\"if [ ! -f /var/lib/sdb-gpt ];then echo DCOS-5890;parted -s /dev/sdb mklabel gpt;touch /var/lib/sdb-gpt;fi\\\"\"], \"disk_setup\": {\"ephemeral0\": {\"layout\": [45, 45, 10], \"overwrite\": true, \"table_type\": \"gpt\"}}, \"fs_setup\": [{\"device\": \"ephemeral0.1\", \"filesystem\": \"ext4\", \"overwrite\": true}, {\"device\": \"ephemeral0.2\", \"filesystem\": \"ext4\", \"overwrite\": true}, {\"device\": \"ephemeral0.3\", \"filesystem\": \"ext4\", \"overwrite\": true}], \"mounts\": [[\"ephemeral0.1\", \"/var/lib/mesos\"], [\"ephemeral0.2\", \"/var/lib/docker\"], [\"ephemeral0.3\", \"/var/tmp\"]], \"runcmd\": [[\"ln\", \"-s\", \"/bin/rm\", \"/usr/bin/rm\"], [\"ln\", \"-s\", \"/bin/mkdir\", \"/usr/bin/mkdir\"], [\"ln\", \"-s\", \"/bin/tar\", \"/usr/bin/tar\"], [\"ln\", \"-s\", \"/bin/ln\", \"/usr/bin/ln\"], [\"ln\", \"-s\", \"/bin/cp\", \"/usr/bin/cp\"], [\"ln\", \"-s\", \"/bin/systemctl\", \"/usr/bin/systemctl\"], [\"ln\", \"-s\", \"/bin/mount\", \"/usr/bin/mount\"], [\"ln\", \"-s\", \"/bin/bash\", \"/usr/bin/bash\"], [\"ln\", \"-s\", \"/usr/sbin/useradd\", \"/usr/bin/useradd\"], [\"systemctl\", \"disable\", \"--now\", \"resolvconf.service\"], [\"systemctl\", \"mask\", \"--now\", \"lxc-net.service\"], [\"systemctl\", \"disable\", \"--now\", \"unscd.service\"], [\"systemctl\", \"stop\", \"--now\", \"unscd.service\"], \"curl -fLsSv --retry 20 -Y 100000 -y 60 -o /var/tmp/1.deb https://az837203.vo.msecnd.net/dcos-deps/libipset3_6.29-1_amd64.deb\", \"curl -fLsSv --retry 20 -Y 100000 -y 60 -o /var/tmp/2.deb https://az837203.vo.msecnd.net/dcos-deps/ipset_6.29-1_amd64.deb\", \"curl -fLsSv --retry 20 -Y 100000 -y 60 -o /var/tmp/3.deb https://az837203.vo.msecnd.net/dcos-deps/unzip_6.0-20ubuntu1_amd64.deb\", \"curl -fLsSv --retry 20 -Y 100000 -y 60 -o /var/tmp/4.deb https://az837203.vo.msecnd.net/dcos-deps/libltdl7_2.4.6-0.1_amd64.deb\", \"sed -i \\\"s/^Port 22$/Port 22\\\\nPort 2222/1\\\" /etc/ssh/sshd_config\", \"service ssh restart\", \"bash -c \\\"try=1;until dpkg -i /var/tmp/{1,2,3,4}.deb || ((try>9));do echo retry \\\\$((try++));sleep \\\\$((try*try));done\\\"\", [\"cp\", \"-p\", \"/etc/resolv.conf\", \"/tmp/resolv.conf\"], [\"rm\", \"-f\", \"/etc/resolv.conf\"], [\"cp\", \"-p\", \"/tmp/resolv.conf\", \"/etc/resolv.conf\"], [\"systemctl\", \"start\", \"dcos-docker-install.service\"], [\"systemctl\", \"start\", \"dcos-config-writer.service\"], [\"systemctl\", \"restart\", \"systemd-journald.service\"], [\"systemctl\", \"restart\", \"docker.service\"], [\"systemctl\", \"start\", \"dcos-link-env.service\"], [\"systemctl\", \"enable\", \"dcos-setup.service\"], [\"systemctl\", \"--no-block\", \"start\", \"dcos-setup.service\"]], \"write_files\": [{\"content\": \"https://dcosio.azureedge.net/dcos/stable\\n\", \"owner\": \"root\", \"path\": \"/etc/mesosphere/setup-flags/repository-url\", \"permissions\": \"0644\"}, {\"content\": \"[\\\"3dt--7847ebb24bf6756c3103902971b34c3f09c3afbd\\\", \\\"adminrouter--0493a6fdaed08e1971871818e194aa4607df4f09\\\", \\\"avro-cpp--760c214063f6b038b522eaf4b768b905fed56ebc\\\", \\\"boost-libs--2015ccb58fb756f61c02ee6aa05cc1e27459a9ec\\\", \\\"bootstrap--59a905ecee27e71168ed44cefda4481fb76b816d\\\", \\\"boto--6344d31eef082c7bd13259b17034ea7b5c34aedf\\\", \\\"check-time--be7d0ba757ec87f9965378fee7c76a6ee5ae996d\\\", \\\"cni--e48337da39a8cd379414acfe0da52a9226a10d24\\\", \\\"cosmos--20decef90f0623ed253a12ec4cf5c148b18d8249\\\", \\\"curl--fc3486c43f98e63f9b12675f1356e8fe842f26b0\\\", \\\"dcos-config--setup_b41bfa84137a6374b2ff5eb1655364d7302bd257\\\", \\\"dcos-history--77b0e97d7b25c8bedf8f7da0689cac65b83e3813\\\", \\\"dcos-image--bda6a02bcb2eb21c4218453a870cc584f921a800\\\", \\\"dcos-image-deps--83584fd868e5b470f7cf754424a9a75b328e9b68\\\", \\\"dcos-integration-test--c28bcb2347799dca43083f55e4c7b28503176f9c\\\", \\\"dcos-log--4d630df863228f38c6333e44670b4c4b20a74832\\\", \\\"dcos-metadata--setup_b41bfa84137a6374b2ff5eb1655364d7302bd257\\\", \\\"dcos-metrics--23ee2f89c58b1258bc959f1d0dd7debcbb3d79d2\\\", \\\"dcos-oauth--0079529da183c0f23a06d2b069721b6fa6cc7b52\\\", \\\"dcos-signal--1bcd3b612cbdc379380dcba17cdf9a3b6652d9dc\\\", \\\"dcos-ui--d4afd695796404a5b35950c3daddcae322481ac4\\\", \\\"dnspython--0f833eb9a8abeba3179b43f3a200a8cd42d3795a\\\", \\\"docker-gc--59a98ed6446a084bf74e4ff4b8e3479f59ea8528\\\", \\\"dvdcli--5374dd4ffb519f1dcefdec89b2247e3404f2e2e3\\\", \\\"erlang--a9ee2530357a3301e53056b36a93420847b339a3\\\", \\\"exhibitor--72d9d8f947e5411eda524d40dde1a58edeb158ed\\\", \\\"flask--26d1bcdb2d1c3dcf1d2c03bc0d4f29c86d321b21\\\", \\\"java--cd5e921ce66b0d3303883c06d73a657314044304\\\", \\\"libevent--208be855d2be29c9271a7bd6c04723ff79946e02\\\", \\\"libffi--83ce3bd7eda2ef089e57efd2bc16c144d5a1f094\\\", \\\"libsodium--9ff915db08c6bba7d6738af5084e782b13c84bf8\\\", \\\"logrotate--7f7bc4416d3ad101d0c5218872858483b516be07\\\", \\\"marathon--bfb24f7f90cb3cd52a1cb22a07caafa5013bba21\\\", \\\"mesos--aaedd03eee0d57f5c0d49c74ff1e5721862cad98\\\", \\\"mesos-dns--0401501b2b5152d01bfa84ff6d007fdafe414b16\\\", \\\"mesos-modules--311849eaae42696b8a7eefe86b9ab3ebd9bd48f5\\\", \\\"metronome--467e4c64f804dbd4cd8572516e111a3f9298c10d\\\", \\\"navstar--1128db0234105a64fb4be52f4453cd6aa895ff30\\\", \\\"ncurses--d889894b71aa1a5b311bafef0e85479025b4dacb\\\", \\\"octarine--e86d3312691b12523280d56f6260216729aaa0ad\\\", \\\"openssl--b01a32a42e3ccba52b417276e9509a441e1d4a82\\\", \\\"pkgpanda-api--541feb8a8be58bdde8fecf1d2e5bfa0515f5a7d0\\\", \\\"pkgpanda-role--f8a749a4a821476ad2ef7e9dd9d12b6a8c4643a4\\\", \\\"pytest--78aee3e58a049cdab0d266af74f77d658b360b4f\\\", \\\"python--b7a144a49577a223d37d447c568f51330ee95390\\\", \\\"python-azure-mgmt-resource--03c05550f43b0e7a4455c33fe43b0deb755d87f0\\\", \\\"python-cryptography--4184767c68e48801dd394072cb370c610a05029d\\\", \\\"python-dateutil--fdc6ff929f65dd0918cf75a9ad56704683d31781\\\", \\\"python-docopt--beba78faa13e5bf4c52393b4b82d81f3c391aa65\\\", \\\"python-gunicorn--a537f95661fb2689c52fe12510eb0d01cb83af60\\\", \\\"python-isodate--40d378c688e6badfd16676dd8b51b742bfebc8d5\\\", \\\"python-jinja2--7450f5ae5a822f63f7a58c717207be0456df51ed\\\", \\\"python-kazoo--cb7ce13a1068cd82dd84ea0de32b529a760a4bdd\\\", \\\"python-markupsafe--dd46d2a3c58611656a235f96d4adc51b2a7a590e\\\", \\\"python-passlib--802ec3605c0b82428fedba60983b1bafaa036bb8\\\", \\\"python-pyyaml--81dd44cc4a24db7cefa7016c6586a131acf279c3\\\", \\\"python-requests--1b2cadbd3811cc0c2ee235ce927e13ea1d6af41d\\\", \\\"python-retrying--eb7b8bac133f50492b1e1349cbe77c3e38bd02c3\\\", \\\"python-tox--07244f8a939a10353634c952c6d88ec4a3c05736\\\", \\\"rexray--869621bb411c9f2a793ea42cdfeed489e1972aaa\\\", \\\"six--f06424b68523c4dfa2a7c3e7475d479f3d361e42\\\", \\\"spartan--9cc57a3d55452b905d90e3201f56913140914ecc\\\", \\\"strace--7d01796d64994451c1b2b82d161a335cbe90569b\\\", \\\"teamcity-messages--e623a4d86eb3a8d199cefcc240dd4c5460cb2962\\\", \\\"toybox--f235594ab8ea9a2864ee72abe86723d76f92e848\\\"]\\n\", \"owner\": \"root\", \"path\": \"/etc/mesosphere/setup-flags/cluster-packages.json\", \"permissions\": \"0644\"}, {\"content\": \"[Journal]\\nMaxLevelConsole=warning\\nRateLimitInterval=1s\\nRateLimitBurst=20000\\n\", \"owner\": \"root\", \"path\": \"/etc/systemd/journald.conf.d/dcos.conf\", \"permissions\": \"0644\"}, {\"content\": \"rexray:\\n  loglevel: info\\n  modules:\\n    default-admin:\\n      host: tcp://127.0.0.1:61003\\n    default-docker:\\n      disabled: true\\n\", \"path\": \"/etc/rexray/config.yml\", \"permissions\": \"0644\"}, {\"content\": \"[Unit]\\nAfter=network-online.target\\nWants=network-online.target\\n[Service]\\nType=oneshot\\nEnvironment=DEBIAN_FRONTEND=noninteractive\\nStandardOutput=journal+console\\nStandardError=journal+console\\nExecStartPre=/usr/bin/curl -fLsSv --retry 20 -Y 100000 -y 60 -o /var/tmp/d.deb https://az837203.vo.msecnd.net/dcos-deps/docker-engine_1.11.2-0~xenial_amd64.deb\\nExecStart=/usr/bin/bash -c \\\"try=1;until dpkg -D3 -i /var/tmp/d.deb || ((try>9));do echo retry $((try++));sleep $((try*try));done;systemctl --now start docker;systemctl restart docker.socket\\\"\\n\", \"path\": \"/etc/systemd/system/dcos-docker-install.service\", \"permissions\": \"0644\"}, {\"content\": \"[Service]\\nRestart=always\\nStartLimitInterval=0\\nRestartSec=15\\nLimitNOFILE=16384\\nExecStartPre=-/sbin/ip link del docker0\\nExecStart=\\nExecStart=/usr/bin/docker daemon -H fd:// --storage-driver=overlay\\n\", \"path\": \"/etc/systemd/system/docker.service.d/execstart.conf\", \"permissions\": \"0644\"}, {\"content\": \"[Unit]\\nPartOf=docker.service\\n[Socket]\\nListenStream=/var/run/docker.sock\\nSocketMode=0660\\nSocketUser=root\\nSocketGroup=docker\\nListenStream=2375\\nBindIPv6Only=both\\n[Install]\\nWantedBy=sockets.target\\n\", \"path\": \"/etc/systemd/system/docker.socket\", \"permissions\": \"0644\"}, {\"content\": \"[Unit]\\nRequires=dcos-setup.service\\nAfter=dcos-setup.service\\n[Service]\\nType=oneshot\\nEnvironmentFile=/etc/environment\\nEnvironmentFile=/opt/mesosphere/environment\\nExecStart=/usr/bin/bash -c \\\"echo $(detect_ip) $(hostname) > /etc/hosts\\\"\\n\", \"path\": \"/etc/systemd/system/dcos-config-writer.service\", \"permissions\": \"0644\"}, {\"content\": \"\\\"bound_values\\\":\\n  \\\"adminrouter_auth_enabled\\\": |-\\n    ', variables('oauthEnabled'), '\\n  \\\"cluster_name\\\": |-\\n    ', variables('masterPublicIPAddressName'), '\\n  \\\"exhibitor_azure_account_key\\\": |-\\n    ', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('masterStorageAccountExhibitorName')), '2015-06-15').key1, '\\n  \\\"exhibitor_azure_account_name\\\": |-\\n    ', variables('masterStorageAccountExhibitorName'), '\\n  \\\"exhibitor_azure_prefix\\\": |-\\n    ', variables('masterPublicIPAddressName'), '\\n  \\\"master_list\\\": |-\\n    [\\\"', reference(variables('masterVMNic')[0]).ipConfigurations[0].properties.privateIPAddress, '\\\", \\\"', reference(variables('masterVMNic')[1]).ipConfigurations[0].properties.privateIPAddress, '\\\", \\\"', reference(variables('masterVMNic')[2]).ipConfigurations[0].properties.privateIPAddress, '\\\", \\\"', reference(variables('masterVMNic')[3]).ipConfigurations[0].properties.privateIPAddress, '\\\", \\\"', reference(variables('masterVMNic')[4]).ipConfigurations[0].properties.privateIPAddress, '\\\"]\\n  \\\"oauth_enabled\\\": |-\\n    ', variables('oauthEnabled'), '\\n\\\"late_bound_package_id\\\": |-\\n  dcos-provider-b41bfa84137a6374b2ff5eb1655364d7302bd257-azure--setup\\n\", \"owner\": \"root\", \"path\": \"/etc/mesosphere/setup-flags/late-config.yaml\", \"permissions\": \"0644\"}, {\"content\": \"[Unit]\\nBefore=dcos.target\\n[Service]\\nType=oneshot\\nStandardOutput=journal+console\\nStandardError=journal+console\\nExecStartPre=/usr/bin/mkdir -p /etc/profile.d\\nExecStart=/usr/bin/ln -sf /opt/mesosphere/bin/add_dcos_path.sh /etc/profile.d/dcos.sh\\n\", \"path\": \"/etc/systemd/system/dcos-link-env.service\", \"permissions\": \"0644\"}, {\"content\": \"[Unit]\\nDescription=Pkgpanda: Download DC/OS to this host.\\nAfter=network-online.target\\nWants=network-online.target\\nConditionPathExists=!/opt/mesosphere/\\n[Service]\\nType=oneshot\\nStandardOutput=journal+console\\nStandardError=journal+console\\nExecStartPre=/usr/bin/curl --keepalive-time 2 -fLsSv --retry 20 -Y 100000 -y 60 -o //var/tmp/bootstrap.tar.xz https://dcosio.azureedge.net/dcos/stable/bootstrap/58fd0833ce81b6244fc73bf65b5deb43217b0bd7.bootstrap.tar.xz\\nExecStartPre=/usr/bin/mkdir -p /opt/mesosphere\\nExecStart=/usr/bin/tar -axf //var/tmp/bootstrap.tar.xz -C /opt/mesosphere\\nExecStartPost=-/usr/bin/rm -f //var/tmp/bootstrap.tar.xz\\n\", \"path\": \"/etc/systemd/system/dcos-download.service\", \"permissions\": \"0644\"}, {\"content\": \"[Unit]\\nDescription=Pkgpanda: Specialize DC/OS for this host.\\nRequires=dcos-download.service\\nAfter=dcos-download.service\\n[Service]\\nType=oneshot\\nStandardOutput=journal+console\\nStandardError=journal+console\\nEnvironmentFile=/opt/mesosphere/environment\\nExecStart=/opt/mesosphere/bin/pkgpanda setup --no-block-systemd\\n[Install]\\nWantedBy=multi-user.target\\n\", \"path\": \"/etc/systemd/system/dcos-setup.service\", \"permissions\": \"0644\"}, {\"content\": \"\", \"path\": \"/etc/mesosphere/roles/master\"}, {\"content\": \"\", \"path\": \"/etc/mesosphere/roles/azure_master\"}, {\"content\": \"\", \"path\": \"/etc/mesosphere/roles/azure\"}]}'))]",
          "linuxConfiguration": "[variables('linuxConfiguration')]"
        },
        "storageProfile": {

          "osDisk": {
            "caching": "ReadWrite",
            "createOption": "FromImage",
            "name": "[concat(variables('masterVMNamePrefix'), copyIndex(),'-osdisk')]",
            "osType": "Linux",
            "image": {
              "uri": "[parameters('sourceImageVhdUri')]"
            },
            "vhd": {
              "uri": "[concat('https://007pqzkn75ztrjmagntpri0.blob.core.windows.net/','vhds/', variables('math').modulo0[copyIndex()],'-osDisk.vhd')]"
            }
          }
        }
      },
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('masterVMNamePrefix'), 'nic-', copyIndex())]",
        "[concat('Microsoft.Compute/availabilitySets/',variables('masterAvailabilitySet'))]"        
        
      ]
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('masterVMNamePrefix'), sub(variables('masterCount'), 1), '/waitforleader')]",
      "apiVersion": "[variables('apiVersionDefault')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "autoUpgradeMinorVersion": true,
        "publisher": "Microsoft.OSTCExtensions",
        "settings": {
          "commandToExecute": "sh -c 'until ping -c1 leader.mesos;do echo waiting for leader.mesos;sleep 15;done;echo leader.mesos up'"
        },
        "type": "CustomScriptForLinux",
        "typeHandlerVersion": "1.4"
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/',variables('num'))]"
      ]
    },
   
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('agentPublicIPAddressName')]",
      "apiVersion": "[variables('apiVersionDefault')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "dnsSettings": {
          "domainNameLabel": "[variables('agentEndpointDNSNamePrefix')]"
        },
        "publicIPAllocationMethod": "Dynamic"
      }
    },
    {
      "type": "Microsoft.Network/loadBalancers",
      "name": "[variables('agentsPublicLbName')]",
      "apiVersion": "[variables('apiVersionDefault')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "backendAddressPools": [
          {
            "name": "[variables('agentsPublicLbBackendPoolName')]"
          }
        ],
        "frontendIPConfigurations": [
          {
            "name": "[variables('agentsPublicLbIPConfigName')]",
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('agentPublicIPAddressName'))]"
              }
            }
          }
        ],
        "inboundNatRules": [ ],
        "loadBalancingRules": [
          {
            "name": "LBRuleHTTP",
            "properties": {
              "backendAddressPool": {
                "id": "[concat(variables('agentsPublicLbID'), '/backendAddressPools/', variables('agentsPublicLbBackendPoolName'))]"
              },
              "backendPort": 80,
              "enableFloatingIP": false,
              "frontendIPConfiguration": {
                "id": "[variables('agentsPublicLbIPConfigID')]"
              },
              "frontendPort": 80,
              "idleTimeoutInMinutes": 5,
              "loadDistribution": "Default",
              "probe": {
                "id": "[concat(variables('agentsPublicLbID'),'/probes/tcpHTTPProbe')]"
              },
              "protocol": "tcp"
            }
          },
          {
            "name": "LBRuleHTTPS",
            "properties": {
              "backendAddressPool": {
                "id": "[concat(variables('agentsPublicLbID'), '/backendAddressPools/', variables('agentsPublicLbBackendPoolName'))]"
              },
              "backendPort": 443,
              "enableFloatingIP": false,
              "frontendIPConfiguration": {
                "id": "[variables('agentsPublicLbIPConfigID')]"
              },
              "frontendPort": 443,
              "idleTimeoutInMinutes": 5,
              "loadDistribution": "Default",
              "probe": {
                "id": "[concat(variables('agentsPublicLbID'),'/probes/tcpHTTPSProbe')]"
              },
              "protocol": "tcp"
            }
          },
          {
            "name": "LBRulePort8080",
            "properties": {
              "backendAddressPool": {
                "id": "[concat(variables('agentsPublicLbID'), '/backendAddressPools/', variables('agentsPublicLbBackendPoolName'))]"
              },
              "backendPort": 8080,
              "enableFloatingIP": false,
              "frontendIPConfiguration": {
                "id": "[variables('agentsPublicLbIPConfigID')]"
              },
              "frontendPort": 8080,
              "idleTimeoutInMinutes": 5,
              "loadDistribution": "Default",
              "probe": {
                "id": "[concat(variables('agentsPublicLbID'),'/probes/tcpPort8080Probe')]"
              },
              "protocol": "tcp"
            }
          }
        ],
        "probes": [
          {
            "name": "tcpHTTPProbe",
            "properties": {
              "intervalInSeconds": "5",
              "numberOfProbes": "2",
              "port": 80,
              "protocol": "tcp"
            }
          },
          {
            "name": "tcpHTTPSProbe",
            "properties": {
              "intervalInSeconds": "5",
              "numberOfProbes": "2",
              "port": 443,
              "protocol": "tcp"
            }
          },
          {
            "name": "tcpPort8080Probe",
            "properties": {
              "intervalInSeconds": "5",
              "numberOfProbes": "2",
              "port": 8080,
              "protocol": "tcp"
            }
          }
        ]
      },
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('agentPublicIPAddressName'))]"
      ]
    },
    {
      "type": "Microsoft.Compute/virtualMachineScaleSets",
      "sku": {
        "capacity": "[variables('agentPublicCount')]",
        "name": "[variables('agentVMSize')]",
        "tier": "Standard"
      },
      "name": "[concat(variables('agentPublicVMNamePrefix'), '-vmss', copyIndex())]",
      "apiVersion": "[variables('apiVersionDefault')]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "masterLbLoopNode",
        "count": "[variables('agentPublicVMSSCount')]"
      },
      "tags": {
        "creationSource": "[concat('acs-', variables('agentPublicVMNamePrefix'), '-vmss', copyIndex())]"
      },
      "properties": {
        "upgradePolicy": {
          "mode": "Manual"
        },
        "virtualMachineProfile": {
        
         
          "networkProfile": {
            "networkInterfaceConfigurations": [
              {
                "name": "agentNodeNic",
                "properties": {
                  "ipConfigurations": [
                    {
                      "name": "nicipconfig",
                      "properties": {
                        "loadBalancerBackendAddressPools": [
                          {
                            "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/loadBalancers/', variables('agentsPublicLbName'), '/backendAddressPools/',variables('agentsPublicLbBackendPoolName'))]"
                          }
                        ],
                        "subnet": {
                          "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'), '/subnets/', variables('agentPublicSubnetName'))]"
                        }
                      }
                    }
                  ],
                  "primary": "true"
                }
              }
            ]
          },
          "osProfile": {
            "adminUsername": "[variables('adminUsername')]",
            "computerNamePrefix": "[variables('agentPublicVMNamePrefix')]",
            "customData": "[base64(concat('#cloud-config\n\n', '{\"bootcmd\": [\"bash -c \\\"if [ ! -f /var/lib/sdb-gpt ];then echo DCOS-5890;parted -s /dev/sdb mklabel gpt;touch /var/lib/sdb-gpt;fi\\\"\"], \"disk_setup\": {\"ephemeral0\": {\"layout\": [45, 45, 10], \"overwrite\": true, \"table_type\": \"gpt\"}}, \"fs_setup\": [{\"device\": \"ephemeral0.1\", \"filesystem\": \"ext4\", \"overwrite\": true}, {\"device\": \"ephemeral0.2\", \"filesystem\": \"ext4\", \"overwrite\": true}, {\"device\": \"ephemeral0.3\", \"filesystem\": \"ext4\", \"overwrite\": true}], \"mounts\": [[\"ephemeral0.1\", \"/var/lib/mesos\"], [\"ephemeral0.2\", \"/var/lib/docker\"], [\"ephemeral0.3\", \"/var/tmp\"]], \"runcmd\": [[\"ln\", \"-s\", \"/bin/rm\", \"/usr/bin/rm\"], [\"ln\", \"-s\", \"/bin/mkdir\", \"/usr/bin/mkdir\"], [\"ln\", \"-s\", \"/bin/tar\", \"/usr/bin/tar\"], [\"ln\", \"-s\", \"/bin/ln\", \"/usr/bin/ln\"], [\"ln\", \"-s\", \"/bin/cp\", \"/usr/bin/cp\"], [\"ln\", \"-s\", \"/bin/systemctl\", \"/usr/bin/systemctl\"], [\"ln\", \"-s\", \"/bin/mount\", \"/usr/bin/mount\"], [\"ln\", \"-s\", \"/bin/bash\", \"/usr/bin/bash\"], [\"ln\", \"-s\", \"/usr/sbin/useradd\", \"/usr/bin/useradd\"], [\"systemctl\", \"disable\", \"--now\", \"resolvconf.service\"], [\"systemctl\", \"mask\", \"--now\", \"lxc-net.service\"], [\"systemctl\", \"disable\", \"--now\", \"unscd.service\"], [\"systemctl\", \"stop\", \"--now\", \"unscd.service\"], \"curl -fLsSv --retry 20 -Y 100000 -y 60 -o /var/tmp/1.deb https://az837203.vo.msecnd.net/dcos-deps/libipset3_6.29-1_amd64.deb\", \"curl -fLsSv --retry 20 -Y 100000 -y 60 -o /var/tmp/2.deb https://az837203.vo.msecnd.net/dcos-deps/ipset_6.29-1_amd64.deb\", \"curl -fLsSv --retry 20 -Y 100000 -y 60 -o /var/tmp/3.deb https://az837203.vo.msecnd.net/dcos-deps/unzip_6.0-20ubuntu1_amd64.deb\", \"curl -fLsSv --retry 20 -Y 100000 -y 60 -o /var/tmp/4.deb https://az837203.vo.msecnd.net/dcos-deps/libltdl7_2.4.6-0.1_amd64.deb\", \"sed -i \\\"s/^Port 22$/Port 22\\\\nPort 2222/1\\\" /etc/ssh/sshd_config\", \"service ssh restart\", \"bash -c \\\"try=1;until dpkg -i /var/tmp/{1,2,3,4}.deb || ((try>9));do echo retry \\\\$((try++));sleep \\\\$((try*try));done\\\"\", [\"cp\", \"-p\", \"/etc/resolv.conf\", \"/tmp/resolv.conf\"], [\"rm\", \"-f\", \"/etc/resolv.conf\"], [\"cp\", \"-p\", \"/tmp/resolv.conf\", \"/etc/resolv.conf\"], [\"systemctl\", \"start\", \"dcos-docker-install.service\"], [\"systemctl\", \"start\", \"dcos-config-writer.service\"], [\"systemctl\", \"restart\", \"systemd-journald.service\"], [\"systemctl\", \"restart\", \"docker.service\"], [\"systemctl\", \"start\", \"dcos-link-env.service\"], [\"systemctl\", \"enable\", \"dcos-setup.service\"], [\"systemctl\", \"--no-block\", \"start\", \"dcos-setup.service\"]], \"write_files\": [{\"content\": \"https://dcosio.azureedge.net/dcos/stable\\n\", \"owner\": \"root\", \"path\": \"/etc/mesosphere/setup-flags/repository-url\", \"permissions\": \"0644\"}, {\"content\": \"[\\\"3dt--7847ebb24bf6756c3103902971b34c3f09c3afbd\\\", \\\"adminrouter--0493a6fdaed08e1971871818e194aa4607df4f09\\\", \\\"avro-cpp--760c214063f6b038b522eaf4b768b905fed56ebc\\\", \\\"boost-libs--2015ccb58fb756f61c02ee6aa05cc1e27459a9ec\\\", \\\"bootstrap--59a905ecee27e71168ed44cefda4481fb76b816d\\\", \\\"boto--6344d31eef082c7bd13259b17034ea7b5c34aedf\\\", \\\"check-time--be7d0ba757ec87f9965378fee7c76a6ee5ae996d\\\", \\\"cni--e48337da39a8cd379414acfe0da52a9226a10d24\\\", \\\"cosmos--20decef90f0623ed253a12ec4cf5c148b18d8249\\\", \\\"curl--fc3486c43f98e63f9b12675f1356e8fe842f26b0\\\", \\\"dcos-config--setup_b41bfa84137a6374b2ff5eb1655364d7302bd257\\\", \\\"dcos-history--77b0e97d7b25c8bedf8f7da0689cac65b83e3813\\\", \\\"dcos-image--bda6a02bcb2eb21c4218453a870cc584f921a800\\\", \\\"dcos-image-deps--83584fd868e5b470f7cf754424a9a75b328e9b68\\\", \\\"dcos-integration-test--c28bcb2347799dca43083f55e4c7b28503176f9c\\\", \\\"dcos-log--4d630df863228f38c6333e44670b4c4b20a74832\\\", \\\"dcos-metadata--setup_b41bfa84137a6374b2ff5eb1655364d7302bd257\\\", \\\"dcos-metrics--23ee2f89c58b1258bc959f1d0dd7debcbb3d79d2\\\", \\\"dcos-oauth--0079529da183c0f23a06d2b069721b6fa6cc7b52\\\", \\\"dcos-signal--1bcd3b612cbdc379380dcba17cdf9a3b6652d9dc\\\", \\\"dcos-ui--d4afd695796404a5b35950c3daddcae322481ac4\\\", \\\"dnspython--0f833eb9a8abeba3179b43f3a200a8cd42d3795a\\\", \\\"docker-gc--59a98ed6446a084bf74e4ff4b8e3479f59ea8528\\\", \\\"dvdcli--5374dd4ffb519f1dcefdec89b2247e3404f2e2e3\\\", \\\"erlang--a9ee2530357a3301e53056b36a93420847b339a3\\\", \\\"exhibitor--72d9d8f947e5411eda524d40dde1a58edeb158ed\\\", \\\"flask--26d1bcdb2d1c3dcf1d2c03bc0d4f29c86d321b21\\\", \\\"java--cd5e921ce66b0d3303883c06d73a657314044304\\\", \\\"libevent--208be855d2be29c9271a7bd6c04723ff79946e02\\\", \\\"libffi--83ce3bd7eda2ef089e57efd2bc16c144d5a1f094\\\", \\\"libsodium--9ff915db08c6bba7d6738af5084e782b13c84bf8\\\", \\\"logrotate--7f7bc4416d3ad101d0c5218872858483b516be07\\\", \\\"marathon--bfb24f7f90cb3cd52a1cb22a07caafa5013bba21\\\", \\\"mesos--aaedd03eee0d57f5c0d49c74ff1e5721862cad98\\\", \\\"mesos-dns--0401501b2b5152d01bfa84ff6d007fdafe414b16\\\", \\\"mesos-modules--311849eaae42696b8a7eefe86b9ab3ebd9bd48f5\\\", \\\"metronome--467e4c64f804dbd4cd8572516e111a3f9298c10d\\\", \\\"navstar--1128db0234105a64fb4be52f4453cd6aa895ff30\\\", \\\"ncurses--d889894b71aa1a5b311bafef0e85479025b4dacb\\\", \\\"octarine--e86d3312691b12523280d56f6260216729aaa0ad\\\", \\\"openssl--b01a32a42e3ccba52b417276e9509a441e1d4a82\\\", \\\"pkgpanda-api--541feb8a8be58bdde8fecf1d2e5bfa0515f5a7d0\\\", \\\"pkgpanda-role--f8a749a4a821476ad2ef7e9dd9d12b6a8c4643a4\\\", \\\"pytest--78aee3e58a049cdab0d266af74f77d658b360b4f\\\", \\\"python--b7a144a49577a223d37d447c568f51330ee95390\\\", \\\"python-azure-mgmt-resource--03c05550f43b0e7a4455c33fe43b0deb755d87f0\\\", \\\"python-cryptography--4184767c68e48801dd394072cb370c610a05029d\\\", \\\"python-dateutil--fdc6ff929f65dd0918cf75a9ad56704683d31781\\\", \\\"python-docopt--beba78faa13e5bf4c52393b4b82d81f3c391aa65\\\", \\\"python-gunicorn--a537f95661fb2689c52fe12510eb0d01cb83af60\\\", \\\"python-isodate--40d378c688e6badfd16676dd8b51b742bfebc8d5\\\", \\\"python-jinja2--7450f5ae5a822f63f7a58c717207be0456df51ed\\\", \\\"python-kazoo--cb7ce13a1068cd82dd84ea0de32b529a760a4bdd\\\", \\\"python-markupsafe--dd46d2a3c58611656a235f96d4adc51b2a7a590e\\\", \\\"python-passlib--802ec3605c0b82428fedba60983b1bafaa036bb8\\\", \\\"python-pyyaml--81dd44cc4a24db7cefa7016c6586a131acf279c3\\\", \\\"python-requests--1b2cadbd3811cc0c2ee235ce927e13ea1d6af41d\\\", \\\"python-retrying--eb7b8bac133f50492b1e1349cbe77c3e38bd02c3\\\", \\\"python-tox--07244f8a939a10353634c952c6d88ec4a3c05736\\\", \\\"rexray--869621bb411c9f2a793ea42cdfeed489e1972aaa\\\", \\\"six--f06424b68523c4dfa2a7c3e7475d479f3d361e42\\\", \\\"spartan--9cc57a3d55452b905d90e3201f56913140914ecc\\\", \\\"strace--7d01796d64994451c1b2b82d161a335cbe90569b\\\", \\\"teamcity-messages--e623a4d86eb3a8d199cefcc240dd4c5460cb2962\\\", \\\"toybox--f235594ab8ea9a2864ee72abe86723d76f92e848\\\"]\\n\", \"owner\": \"root\", \"path\": \"/etc/mesosphere/setup-flags/cluster-packages.json\", \"permissions\": \"0644\"}, {\"content\": \"[Journal]\\nMaxLevelConsole=warning\\nRateLimitInterval=1s\\nRateLimitBurst=20000\\n\", \"owner\": \"root\", \"path\": \"/etc/systemd/journald.conf.d/dcos.conf\", \"permissions\": \"0644\"}, {\"content\": \"rexray:\\n  loglevel: info\\n  modules:\\n    default-admin:\\n      host: tcp://127.0.0.1:61003\\n    default-docker:\\n      disabled: true\\n\", \"path\": \"/etc/rexray/config.yml\", \"permissions\": \"0644\"}, {\"content\": \"[Unit]\\nAfter=network-online.target\\nWants=network-online.target\\n[Service]\\nType=oneshot\\nEnvironment=DEBIAN_FRONTEND=noninteractive\\nStandardOutput=journal+console\\nStandardError=journal+console\\nExecStartPre=/usr/bin/curl -fLsSv --retry 20 -Y 100000 -y 60 -o /var/tmp/d.deb https://az837203.vo.msecnd.net/dcos-deps/docker-engine_1.11.2-0~xenial_amd64.deb\\nExecStart=/usr/bin/bash -c \\\"try=1;until dpkg -D3 -i /var/tmp/d.deb || ((try>9));do echo retry $((try++));sleep $((try*try));done;systemctl --now start docker;systemctl restart docker.socket\\\"\\n\", \"path\": \"/etc/systemd/system/dcos-docker-install.service\", \"permissions\": \"0644\"}, {\"content\": \"[Service]\\nRestart=always\\nStartLimitInterval=0\\nRestartSec=15\\nLimitNOFILE=16384\\nExecStartPre=-/sbin/ip link del docker0\\nExecStart=\\nExecStart=/usr/bin/docker daemon -H fd:// --storage-driver=overlay\\n\", \"path\": \"/etc/systemd/system/docker.service.d/execstart.conf\", \"permissions\": \"0644\"}, {\"content\": \"[Unit]\\nPartOf=docker.service\\n[Socket]\\nListenStream=/var/run/docker.sock\\nSocketMode=0660\\nSocketUser=root\\nSocketGroup=docker\\nListenStream=2375\\nBindIPv6Only=both\\n[Install]\\nWantedBy=sockets.target\\n\", \"path\": \"/etc/systemd/system/docker.socket\", \"permissions\": \"0644\"}, {\"content\": \"[Unit]\\nRequires=dcos-setup.service\\nAfter=dcos-setup.service\\n[Service]\\nType=oneshot\\nEnvironmentFile=/etc/environment\\nEnvironmentFile=/opt/mesosphere/environment\\nExecStart=/usr/bin/bash -c \\\"echo $(detect_ip) $(hostname) > /etc/hosts\\\"\\n\", \"path\": \"/etc/systemd/system/dcos-config-writer.service\", \"permissions\": \"0644\"}, {\"content\": \"\\\"bound_values\\\":\\n  \\\"adminrouter_auth_enabled\\\": |-\\n    ', variables('oauthEnabled'), '\\n  \\\"cluster_name\\\": |-\\n    ', variables('masterPublicIPAddressName'), '\\n  \\\"exhibitor_azure_account_key\\\": |-\\n    ', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('masterStorageAccountExhibitorName')), '2015-06-15').key1, '\\n  \\\"exhibitor_azure_account_name\\\": |-\\n    ', variables('masterStorageAccountExhibitorName'), '\\n  \\\"exhibitor_azure_prefix\\\": |-\\n    ', variables('masterPublicIPAddressName'), '\\n  \\\"master_list\\\": |-\\n    [\\\"', reference(variables('masterVMNic')[0]).ipConfigurations[0].properties.privateIPAddress, '\\\", \\\"', reference(variables('masterVMNic')[1]).ipConfigurations[0].properties.privateIPAddress, '\\\", \\\"', reference(variables('masterVMNic')[2]).ipConfigurations[0].properties.privateIPAddress, '\\\", \\\"', reference(variables('masterVMNic')[3]).ipConfigurations[0].properties.privateIPAddress, '\\\", \\\"', reference(variables('masterVMNic')[4]).ipConfigurations[0].properties.privateIPAddress, '\\\"]\\n  \\\"oauth_enabled\\\": |-\\n    ', variables('oauthEnabled'), '\\n\\\"late_bound_package_id\\\": |-\\n  dcos-provider-b41bfa84137a6374b2ff5eb1655364d7302bd257-azure--setup\\n\", \"owner\": \"root\", \"path\": \"/etc/mesosphere/setup-flags/late-config.yaml\", \"permissions\": \"0644\"}, {\"content\": \"[Unit]\\nBefore=dcos.target\\n[Service]\\nType=oneshot\\nStandardOutput=journal+console\\nStandardError=journal+console\\nExecStartPre=/usr/bin/mkdir -p /etc/profile.d\\nExecStart=/usr/bin/ln -sf /opt/mesosphere/bin/add_dcos_path.sh /etc/profile.d/dcos.sh\\n\", \"path\": \"/etc/systemd/system/dcos-link-env.service\", \"permissions\": \"0644\"}, {\"content\": \"[Unit]\\nDescription=Pkgpanda: Download DC/OS to this host.\\nAfter=network-online.target\\nWants=network-online.target\\nConditionPathExists=!/opt/mesosphere/\\n[Service]\\nType=oneshot\\nStandardOutput=journal+console\\nStandardError=journal+console\\nExecStartPre=/usr/bin/curl --keepalive-time 2 -fLsSv --retry 20 -Y 100000 -y 60 -o //var/tmp/bootstrap.tar.xz https://dcosio.azureedge.net/dcos/stable/bootstrap/58fd0833ce81b6244fc73bf65b5deb43217b0bd7.bootstrap.tar.xz\\nExecStartPre=/usr/bin/mkdir -p /opt/mesosphere\\nExecStart=/usr/bin/tar -axf //var/tmp/bootstrap.tar.xz -C /opt/mesosphere\\nExecStartPost=-/usr/bin/rm -f //var/tmp/bootstrap.tar.xz\\n\", \"path\": \"/etc/systemd/system/dcos-download.service\", \"permissions\": \"0644\"}, {\"content\": \"[Unit]\\nDescription=Pkgpanda: Specialize DC/OS for this host.\\nRequires=dcos-download.service\\nAfter=dcos-download.service\\n[Service]\\nType=oneshot\\nStandardOutput=journal+console\\nStandardError=journal+console\\nEnvironmentFile=/opt/mesosphere/environment\\nExecStart=/opt/mesosphere/bin/pkgpanda setup --no-block-systemd\\n[Install]\\nWantedBy=multi-user.target\\n\", \"path\": \"/etc/systemd/system/dcos-setup.service\", \"permissions\": \"0644\"}, {\"content\": \"\", \"path\": \"/etc/mesosphere/roles/slave_public\"}, {\"content\": \"\", \"path\": \"/etc/mesosphere/roles/azure\"}]}'))]",
            "linuxConfiguration": {
              "disablePasswordAuthentication": "true",
              "ssh": {
                "publicKeys": [
                  {
                    "keyData": "[parameters('sshRSAPublicKey')]",
                    "path": "[variables('sshKeyPath')]"
                  }
                ]
              }
            }
          },
          "storageProfile": {

            "osDisk": {
              "caching": "ReadOnly",
              "createOption": "FromImage",
              "name": "vmssosdisk",
              "osType": "Linux",
              "image": {
                "uri": "[parameters('sourceImageVhdUri')]"
              }
            }
          }
        }
      },
      "dependsOn": [
        
        "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
        "[concat('Microsoft.Network/loadBalancers/', variables('agentsPublicLbName'))]"
      
      ]
    },
    {
      "type": "Microsoft.Compute/virtualMachineScaleSets",
      "sku": {
        "capacity": "[variables('agentPrivateCount')]",
        "name": "[variables('agentVMSize')]",
        "tier": "Standard"
      },
      "name": "[concat(variables('agentPrivateVMNamePrefix'), '-vmss', copyIndex())]",
      "apiVersion": "[variables('apiVersionDefault')]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "masterLbLoopNode",
        "count": "[variables('agentPrivateVMSSCount')]"
      },
      "tags": {
        "creationSource": "[concat('acs-', variables('agentPrivateVMNamePrefix'), '-vmss', copyIndex())]"
      },
      "properties": {
        "upgradePolicy": {
          "mode": "Manual"
        },
        "virtualMachineProfile": {
         
         
         
          
          "networkProfile": {
            "networkInterfaceConfigurations": [
              {
                "name": "agentPrivateNodeNic",
                "properties": {
                  "ipConfigurations": [
                    {
                      "name": "nicipconfig",
                      "properties": {
                        "subnet": {
                          "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'), '/subnets/', variables('agentPrivateSubnetName'))]"
                        }
                      }
                    }
                  ],
                  "primary": "true"
                }
              }
            ]
          },
          "osProfile": {
            "adminUsername": "[variables('adminUsername')]",
            "computerNamePrefix": "[variables('agentPrivateVMNamePrefix')]",
            "customData": "[base64(concat('#cloud-config\n\n', '{\"bootcmd\": [\"bash -c \\\"if [ ! -f /var/lib/sdb-gpt ];then echo DCOS-5890;parted -s /dev/sdb mklabel gpt;touch /var/lib/sdb-gpt;fi\\\"\"], \"disk_setup\": {\"ephemeral0\": {\"layout\": [45, 45, 10], \"overwrite\": true, \"table_type\": \"gpt\"}}, \"fs_setup\": [{\"device\": \"ephemeral0.1\", \"filesystem\": \"ext4\", \"overwrite\": true}, {\"device\": \"ephemeral0.2\", \"filesystem\": \"ext4\", \"overwrite\": true}, {\"device\": \"ephemeral0.3\", \"filesystem\": \"ext4\", \"overwrite\": true}], \"mounts\": [[\"ephemeral0.1\", \"/var/lib/mesos\"], [\"ephemeral0.2\", \"/var/lib/docker\"], [\"ephemeral0.3\", \"/var/tmp\"]], \"runcmd\": [[\"ln\", \"-s\", \"/bin/rm\", \"/usr/bin/rm\"], [\"ln\", \"-s\", \"/bin/mkdir\", \"/usr/bin/mkdir\"], [\"ln\", \"-s\", \"/bin/tar\", \"/usr/bin/tar\"], [\"ln\", \"-s\", \"/bin/ln\", \"/usr/bin/ln\"], [\"ln\", \"-s\", \"/bin/cp\", \"/usr/bin/cp\"], [\"ln\", \"-s\", \"/bin/systemctl\", \"/usr/bin/systemctl\"], [\"ln\", \"-s\", \"/bin/mount\", \"/usr/bin/mount\"], [\"ln\", \"-s\", \"/bin/bash\", \"/usr/bin/bash\"], [\"ln\", \"-s\", \"/usr/sbin/useradd\", \"/usr/bin/useradd\"], [\"systemctl\", \"disable\", \"--now\", \"resolvconf.service\"], [\"systemctl\", \"mask\", \"--now\", \"lxc-net.service\"], [\"systemctl\", \"disable\", \"--now\", \"unscd.service\"], [\"systemctl\", \"stop\", \"--now\", \"unscd.service\"], \"curl -fLsSv --retry 20 -Y 100000 -y 60 -o /var/tmp/1.deb https://az837203.vo.msecnd.net/dcos-deps/libipset3_6.29-1_amd64.deb\", \"curl -fLsSv --retry 20 -Y 100000 -y 60 -o /var/tmp/2.deb https://az837203.vo.msecnd.net/dcos-deps/ipset_6.29-1_amd64.deb\", \"curl -fLsSv --retry 20 -Y 100000 -y 60 -o /var/tmp/3.deb https://az837203.vo.msecnd.net/dcos-deps/unzip_6.0-20ubuntu1_amd64.deb\", \"curl -fLsSv --retry 20 -Y 100000 -y 60 -o /var/tmp/4.deb https://az837203.vo.msecnd.net/dcos-deps/libltdl7_2.4.6-0.1_amd64.deb\", \"sed -i \\\"s/^Port 22$/Port 22\\\\nPort 2222/1\\\" /etc/ssh/sshd_config\", \"service ssh restart\", \"bash -c \\\"try=1;until dpkg -i /var/tmp/{1,2,3,4}.deb || ((try>9));do echo retry \\\\$((try++));sleep \\\\$((try*try));done\\\"\", [\"cp\", \"-p\", \"/etc/resolv.conf\", \"/tmp/resolv.conf\"], [\"rm\", \"-f\", \"/etc/resolv.conf\"], [\"cp\", \"-p\", \"/tmp/resolv.conf\", \"/etc/resolv.conf\"], [\"systemctl\", \"start\", \"dcos-docker-install.service\"], [\"systemctl\", \"start\", \"dcos-config-writer.service\"], [\"systemctl\", \"restart\", \"systemd-journald.service\"], [\"systemctl\", \"restart\", \"docker.service\"], [\"systemctl\", \"start\", \"dcos-link-env.service\"], [\"systemctl\", \"enable\", \"dcos-setup.service\"], [\"systemctl\", \"--no-block\", \"start\", \"dcos-setup.service\"]], \"write_files\": [{\"content\": \"https://dcosio.azureedge.net/dcos/stable\\n\", \"owner\": \"root\", \"path\": \"/etc/mesosphere/setup-flags/repository-url\", \"permissions\": \"0644\"}, {\"content\": \"[\\\"3dt--7847ebb24bf6756c3103902971b34c3f09c3afbd\\\", \\\"adminrouter--0493a6fdaed08e1971871818e194aa4607df4f09\\\", \\\"avro-cpp--760c214063f6b038b522eaf4b768b905fed56ebc\\\", \\\"boost-libs--2015ccb58fb756f61c02ee6aa05cc1e27459a9ec\\\", \\\"bootstrap--59a905ecee27e71168ed44cefda4481fb76b816d\\\", \\\"boto--6344d31eef082c7bd13259b17034ea7b5c34aedf\\\", \\\"check-time--be7d0ba757ec87f9965378fee7c76a6ee5ae996d\\\", \\\"cni--e48337da39a8cd379414acfe0da52a9226a10d24\\\", \\\"cosmos--20decef90f0623ed253a12ec4cf5c148b18d8249\\\", \\\"curl--fc3486c43f98e63f9b12675f1356e8fe842f26b0\\\", \\\"dcos-config--setup_b41bfa84137a6374b2ff5eb1655364d7302bd257\\\", \\\"dcos-history--77b0e97d7b25c8bedf8f7da0689cac65b83e3813\\\", \\\"dcos-image--bda6a02bcb2eb21c4218453a870cc584f921a800\\\", \\\"dcos-image-deps--83584fd868e5b470f7cf754424a9a75b328e9b68\\\", \\\"dcos-integration-test--c28bcb2347799dca43083f55e4c7b28503176f9c\\\", \\\"dcos-log--4d630df863228f38c6333e44670b4c4b20a74832\\\", \\\"dcos-metadata--setup_b41bfa84137a6374b2ff5eb1655364d7302bd257\\\", \\\"dcos-metrics--23ee2f89c58b1258bc959f1d0dd7debcbb3d79d2\\\", \\\"dcos-oauth--0079529da183c0f23a06d2b069721b6fa6cc7b52\\\", \\\"dcos-signal--1bcd3b612cbdc379380dcba17cdf9a3b6652d9dc\\\", \\\"dcos-ui--d4afd695796404a5b35950c3daddcae322481ac4\\\", \\\"dnspython--0f833eb9a8abeba3179b43f3a200a8cd42d3795a\\\", \\\"docker-gc--59a98ed6446a084bf74e4ff4b8e3479f59ea8528\\\", \\\"dvdcli--5374dd4ffb519f1dcefdec89b2247e3404f2e2e3\\\", \\\"erlang--a9ee2530357a3301e53056b36a93420847b339a3\\\", \\\"exhibitor--72d9d8f947e5411eda524d40dde1a58edeb158ed\\\", \\\"flask--26d1bcdb2d1c3dcf1d2c03bc0d4f29c86d321b21\\\", \\\"java--cd5e921ce66b0d3303883c06d73a657314044304\\\", \\\"libevent--208be855d2be29c9271a7bd6c04723ff79946e02\\\", \\\"libffi--83ce3bd7eda2ef089e57efd2bc16c144d5a1f094\\\", \\\"libsodium--9ff915db08c6bba7d6738af5084e782b13c84bf8\\\", \\\"logrotate--7f7bc4416d3ad101d0c5218872858483b516be07\\\", \\\"marathon--bfb24f7f90cb3cd52a1cb22a07caafa5013bba21\\\", \\\"mesos--aaedd03eee0d57f5c0d49c74ff1e5721862cad98\\\", \\\"mesos-dns--0401501b2b5152d01bfa84ff6d007fdafe414b16\\\", \\\"mesos-modules--311849eaae42696b8a7eefe86b9ab3ebd9bd48f5\\\", \\\"metronome--467e4c64f804dbd4cd8572516e111a3f9298c10d\\\", \\\"navstar--1128db0234105a64fb4be52f4453cd6aa895ff30\\\", \\\"ncurses--d889894b71aa1a5b311bafef0e85479025b4dacb\\\", \\\"octarine--e86d3312691b12523280d56f6260216729aaa0ad\\\", \\\"openssl--b01a32a42e3ccba52b417276e9509a441e1d4a82\\\", \\\"pkgpanda-api--541feb8a8be58bdde8fecf1d2e5bfa0515f5a7d0\\\", \\\"pkgpanda-role--f8a749a4a821476ad2ef7e9dd9d12b6a8c4643a4\\\", \\\"pytest--78aee3e58a049cdab0d266af74f77d658b360b4f\\\", \\\"python--b7a144a49577a223d37d447c568f51330ee95390\\\", \\\"python-azure-mgmt-resource--03c05550f43b0e7a4455c33fe43b0deb755d87f0\\\", \\\"python-cryptography--4184767c68e48801dd394072cb370c610a05029d\\\", \\\"python-dateutil--fdc6ff929f65dd0918cf75a9ad56704683d31781\\\", \\\"python-docopt--beba78faa13e5bf4c52393b4b82d81f3c391aa65\\\", \\\"python-gunicorn--a537f95661fb2689c52fe12510eb0d01cb83af60\\\", \\\"python-isodate--40d378c688e6badfd16676dd8b51b742bfebc8d5\\\", \\\"python-jinja2--7450f5ae5a822f63f7a58c717207be0456df51ed\\\", \\\"python-kazoo--cb7ce13a1068cd82dd84ea0de32b529a760a4bdd\\\", \\\"python-markupsafe--dd46d2a3c58611656a235f96d4adc51b2a7a590e\\\", \\\"python-passlib--802ec3605c0b82428fedba60983b1bafaa036bb8\\\", \\\"python-pyyaml--81dd44cc4a24db7cefa7016c6586a131acf279c3\\\", \\\"python-requests--1b2cadbd3811cc0c2ee235ce927e13ea1d6af41d\\\", \\\"python-retrying--eb7b8bac133f50492b1e1349cbe77c3e38bd02c3\\\", \\\"python-tox--07244f8a939a10353634c952c6d88ec4a3c05736\\\", \\\"rexray--869621bb411c9f2a793ea42cdfeed489e1972aaa\\\", \\\"six--f06424b68523c4dfa2a7c3e7475d479f3d361e42\\\", \\\"spartan--9cc57a3d55452b905d90e3201f56913140914ecc\\\", \\\"strace--7d01796d64994451c1b2b82d161a335cbe90569b\\\", \\\"teamcity-messages--e623a4d86eb3a8d199cefcc240dd4c5460cb2962\\\", \\\"toybox--f235594ab8ea9a2864ee72abe86723d76f92e848\\\"]\\n\", \"owner\": \"root\", \"path\": \"/etc/mesosphere/setup-flags/cluster-packages.json\", \"permissions\": \"0644\"}, {\"content\": \"[Journal]\\nMaxLevelConsole=warning\\nRateLimitInterval=1s\\nRateLimitBurst=20000\\n\", \"owner\": \"root\", \"path\": \"/etc/systemd/journald.conf.d/dcos.conf\", \"permissions\": \"0644\"}, {\"content\": \"rexray:\\n  loglevel: info\\n  modules:\\n    default-admin:\\n      host: tcp://127.0.0.1:61003\\n    default-docker:\\n      disabled: true\\n\", \"path\": \"/etc/rexray/config.yml\", \"permissions\": \"0644\"}, {\"content\": \"[Unit]\\nAfter=network-online.target\\nWants=network-online.target\\n[Service]\\nType=oneshot\\nEnvironment=DEBIAN_FRONTEND=noninteractive\\nStandardOutput=journal+console\\nStandardError=journal+console\\nExecStartPre=/usr/bin/curl -fLsSv --retry 20 -Y 100000 -y 60 -o /var/tmp/d.deb https://az837203.vo.msecnd.net/dcos-deps/docker-engine_1.11.2-0~xenial_amd64.deb\\nExecStart=/usr/bin/bash -c \\\"try=1;until dpkg -D3 -i /var/tmp/d.deb || ((try>9));do echo retry $((try++));sleep $((try*try));done;systemctl --now start docker;systemctl restart docker.socket\\\"\\n\", \"path\": \"/etc/systemd/system/dcos-docker-install.service\", \"permissions\": \"0644\"}, {\"content\": \"[Service]\\nRestart=always\\nStartLimitInterval=0\\nRestartSec=15\\nLimitNOFILE=16384\\nExecStartPre=-/sbin/ip link del docker0\\nExecStart=\\nExecStart=/usr/bin/docker daemon -H fd:// --storage-driver=overlay\\n\", \"path\": \"/etc/systemd/system/docker.service.d/execstart.conf\", \"permissions\": \"0644\"}, {\"content\": \"[Unit]\\nPartOf=docker.service\\n[Socket]\\nListenStream=/var/run/docker.sock\\nSocketMode=0660\\nSocketUser=root\\nSocketGroup=docker\\nListenStream=2375\\nBindIPv6Only=both\\n[Install]\\nWantedBy=sockets.target\\n\", \"path\": \"/etc/systemd/system/docker.socket\", \"permissions\": \"0644\"}, {\"content\": \"[Unit]\\nRequires=dcos-setup.service\\nAfter=dcos-setup.service\\n[Service]\\nType=oneshot\\nEnvironmentFile=/etc/environment\\nEnvironmentFile=/opt/mesosphere/environment\\nExecStart=/usr/bin/bash -c \\\"echo $(detect_ip) $(hostname) > /etc/hosts\\\"\\n\", \"path\": \"/etc/systemd/system/dcos-config-writer.service\", \"permissions\": \"0644\"}, {\"content\": \"\\\"bound_values\\\":\\n  \\\"adminrouter_auth_enabled\\\": |-\\n    ', variables('oauthEnabled'), '\\n  \\\"cluster_name\\\": |-\\n    ', variables('masterPublicIPAddressName'), '\\n  \\\"exhibitor_azure_account_key\\\": |-\\n    ', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('masterStorageAccountExhibitorName')), '2015-06-15').key1, '\\n  \\\"exhibitor_azure_account_name\\\": |-\\n    ', variables('masterStorageAccountExhibitorName'), '\\n  \\\"exhibitor_azure_prefix\\\": |-\\n    ', variables('masterPublicIPAddressName'), '\\n  \\\"master_list\\\": |-\\n    [\\\"', reference(variables('masterVMNic')[0]).ipConfigurations[0].properties.privateIPAddress, '\\\", \\\"', reference(variables('masterVMNic')[1]).ipConfigurations[0].properties.privateIPAddress, '\\\", \\\"', reference(variables('masterVMNic')[2]).ipConfigurations[0].properties.privateIPAddress, '\\\", \\\"', reference(variables('masterVMNic')[3]).ipConfigurations[0].properties.privateIPAddress, '\\\", \\\"', reference(variables('masterVMNic')[4]).ipConfigurations[0].properties.privateIPAddress, '\\\"]\\n  \\\"oauth_enabled\\\": |-\\n    ', variables('oauthEnabled'), '\\n\\\"late_bound_package_id\\\": |-\\n  dcos-provider-b41bfa84137a6374b2ff5eb1655364d7302bd257-azure--setup\\n\", \"owner\": \"root\", \"path\": \"/etc/mesosphere/setup-flags/late-config.yaml\", \"permissions\": \"0644\"}, {\"content\": \"[Unit]\\nBefore=dcos.target\\n[Service]\\nType=oneshot\\nStandardOutput=journal+console\\nStandardError=journal+console\\nExecStartPre=/usr/bin/mkdir -p /etc/profile.d\\nExecStart=/usr/bin/ln -sf /opt/mesosphere/bin/add_dcos_path.sh /etc/profile.d/dcos.sh\\n\", \"path\": \"/etc/systemd/system/dcos-link-env.service\", \"permissions\": \"0644\"}, {\"content\": \"[Unit]\\nDescription=Pkgpanda: Download DC/OS to this host.\\nAfter=network-online.target\\nWants=network-online.target\\nConditionPathExists=!/opt/mesosphere/\\n[Service]\\nType=oneshot\\nStandardOutput=journal+console\\nStandardError=journal+console\\nExecStartPre=/usr/bin/curl --keepalive-time 2 -fLsSv --retry 20 -Y 100000 -y 60 -o //var/tmp/bootstrap.tar.xz https://dcosio.azureedge.net/dcos/stable/bootstrap/58fd0833ce81b6244fc73bf65b5deb43217b0bd7.bootstrap.tar.xz\\nExecStartPre=/usr/bin/mkdir -p /opt/mesosphere\\nExecStart=/usr/bin/tar -axf //var/tmp/bootstrap.tar.xz -C /opt/mesosphere\\nExecStartPost=-/usr/bin/rm -f //var/tmp/bootstrap.tar.xz\\n\", \"path\": \"/etc/systemd/system/dcos-download.service\", \"permissions\": \"0644\"}, {\"content\": \"[Unit]\\nDescription=Pkgpanda: Specialize DC/OS for this host.\\nRequires=dcos-download.service\\nAfter=dcos-download.service\\n[Service]\\nType=oneshot\\nStandardOutput=journal+console\\nStandardError=journal+console\\nEnvironmentFile=/opt/mesosphere/environment\\nExecStart=/opt/mesosphere/bin/pkgpanda setup --no-block-systemd\\n[Install]\\nWantedBy=multi-user.target\\n\", \"path\": \"/etc/systemd/system/dcos-setup.service\", \"permissions\": \"0644\"}, {\"content\": \"\", \"path\": \"/etc/mesosphere/roles/slave\"}, {\"content\": \"\", \"path\": \"/etc/mesosphere/roles/azure\"}]}'))]",
            "linuxConfiguration": {
              "disablePasswordAuthentication": "true",
              "ssh": {
                "publicKeys": [
                  {
                    "keyData": "[parameters('sshRSAPublicKey')]",
                    "path": "[variables('sshKeyPath')]"
                  }
                ]
              }
            }
          },
          "storageProfile": {

            "osDisk": {
              "caching": "ReadOnly",
              "createOption": "FromImage",
              "name": "vmssosdisk",
              "osType": "Linux",
              "image": {
                "uri": "[parameters('sourceImageVhdUri')]"
              }
            
            }
          }
        }
      },
      "dependsOn": [
       
        "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
        
      ]
    }
  ],
  "outputs": {
    "agentFQDN": {
      "type": "String",
      "value": "[reference(concat('Microsoft.Network/publicIPAddresses/', variables('agentPublicIPAddressName'))).dnsSettings.fqdn]"
    },
   
    "jumpboxFQDN": {
      "type": "String",
      "value": ""
    },
    "masterFQDN": {
      "type": "String",
      "value": "[reference(concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))).dnsSettings.fqdn]"
    }
  }
}
